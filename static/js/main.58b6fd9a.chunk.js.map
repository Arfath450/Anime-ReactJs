{"version":3,"sources":["Header.jsx","Images.jsx","Card.jsx","Sdata.jsx","APP.jsx","serviceWorker.js","index.js"],"names":["Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","Images","props","src","imgsrc","alt","Card","title","sname","link","target","Sdata","APP","map","val","index","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","onAddToHomescreenClick","alert","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.58b6fd9a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header(){\r\n    return(\r\n      <>\r\n        <nav className=\"navbar navbar-expand-lg  navbar-dark bg-dark\">\r\n  <a className=\"navbar-brand\" href=\"#\"><span className=\"mak\">Mak</span> <span className=\"anime\">Anime</span></a>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo02\" aria-controls=\"navbarTogglerDemo02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\r\n    <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n      <li className=\"nav-item active\">\r\n        <a className=\"nav-link\" href=\"#\">Home</a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\">Service</a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\">About</a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\">Contact</a>\r\n      </li>\r\n    </ul>\r\n    <form className=\"form-inline my-2 my-lg-0\">\r\n      <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search...\"></input>\r\n      <button className=\"btn  my-2 my-sm-0\" type=\"submit\">Search</button>\r\n    </form>\r\n  </div>\r\n</nav>\r\n      </>\r\n    );\r\n}\r\nexport default Header;","import React from 'react';\r\n\r\nconst Images = (props) => {\r\n        return(\r\n            <img src={props.imgsrc} alt=\"myPic\" />\r\n        )\r\n}\r\n\r\nexport default Images;","import React from 'react';\r\nimport './index.css'\r\nimport Images from './Images';\r\n\r\nfunction Card(props){\r\n    return(\r\n        <>\r\n        <div className=\"cards\">\r\n            <div className=\"card\">\r\n               <Images imgsrc = {props.imgsrc} />\r\n                <div className=\"card_info\">\r\n                    <h3 className=\"card_catigery\">{props.title}</h3>\r\n                    <span className=\"card_title\">{props.sname}</span><br></br>\r\n                    <a href={props.link} target=\"_blank\"><button>Watch Now</button></a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n</>\r\n    );\r\n}\r\n\r\nexport default Card;","const Sdata = [\r\n    {\r\n        imgsrc : \"https://wallpapercave.com/wp/wp1837539.jpg\",\r\n        title : \"anime\",\r\n        sname :\"attack on titan\",\r\n        link :\"https://kissanime.nz/Search/?s=attack+on+titan\",\r\n    },\r\n\r\n    {\r\n        imgsrc : \"https://wallpapercave.com/wp/wp1874035.png\",\r\n        title : \"anime\",\r\n        sname :\"my hero academia\",\r\n        link :\"https://kissanime.nz/Search/?s=my%20hero%20academia\",\r\n    },\r\n\r\n    {\r\n        imgsrc : \"https://wallpapercave.com/wp/wp4366895.png\",\r\n        title : \"anime\",\r\n        sname :\"demon slayer\",\r\n        link :\"https://kissanime.nz/Search/?s=demon%20slayer\",\r\n    },\r\n\r\n    {\r\n        imgsrc : \"https://wallpapercave.com/wp/wp5219865.jpg\",\r\n        title : \"anime\",\r\n        sname :\"death note\",\r\n        link :\"https://kissanime.nz/Search/?s=death%20note\",\r\n    },\r\n\r\n    {\r\n        imgsrc : \"https://wallpapercave.com/wp/wp2099102.jpg\",\r\n        title : \"anime\",\r\n        sname :\"Blue Exorcist\",\r\n        link :\"https://kissanime.nz/Search/?s=Blue%20Exorcist\",\r\n    },\r\n\r\n    {\r\n        imgsrc : \"https://wallpapercave.com/wp/wp5068758.png\",\r\n        title : \"anime\",\r\n        sname :\"tokyo ghoul\",\r\n        link :\"https://kissanime.nz/Search/?s=tokyo%20ghoul\",\r\n    },\r\n];\r\n\r\nexport default Sdata;","import React from 'react';\r\nimport './index.css';\r\nimport Header from './Header';\r\nimport Card from './Card';\r\nimport Sdata from './Sdata';\r\n\r\nconst APP = () => (\r\n    <>\r\n    <Header/>\r\n  {Sdata.map((val,index) => {\r\n    return(\r\n      <Card  \r\n    imgsrc = {val.imgsrc}\r\n    title = {val.title}\r\n    sname = {val.sname}\r\n    link = {val.link}\r\n  />\r\n    );\r\n  })}\r\n  </>\r\n)\r\n\r\nexport default APP;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport APP from './APP'\nimport * as serviceWorker from './serviceWorker';\nimport AddToHomescreen from 'react-add-to-homescreen';\n\n const handleAddToHomescreenClick = () => {\n  alert('Add To Home Screen');\n};\n\nReactDOM.render(\n    <>\n<APP/>\n<AddToHomescreen onAddToHomescreenClick={handleAddToHomescreenClick} />\n</>, \n    document.getElementById('root'));\n\nserviceWorker.register();\n\n"],"sourceRoot":""}